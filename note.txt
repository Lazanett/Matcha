DATABASE
creation d'un docker pour contenir la base de donnee mysql 
car pas de droit sudo a 42

* creer un docker compose
* lancer le docker : docker-compose up -d
* eteindre le docker : docker-compose down

creation database :

1 Lancer le docker = docker compose up -d
2 lister les dockers (etre sur qu'il est lancer) = docker ps
3 Connexion MYSQL = docker exec -it matcha_mysql mysql -u matcha_user -p
  (mot de passe : matcha_password)

4 Arreter le docker = (avant quitter mysql avec "exit;")
                    = docker compose down
                    = si marche pas = docker stop matcha_mysql


Réinitialisation complète (tt donnee) = docker compose down -v


Liste les volumes Docker = docker volume ls 
Voir où le volume est stocké = docker volume inspect mysql_data 

VOIR LOGS = docker compose logs -f

==========================================================================
liste : id, name, prenom, pseudo, email, genre(f/M/O), SexualPref, age, password, 
        nblike, tags, famerating, biography, location.

==========================================================================
                      JWT (JSON Web Token) 

jeton sécurisé qui permet d'authentifier un utilisateur sans 
stocker son état côté serveur. tilisé pour la connexion des 
utilisateurs et la gestion des permissions.

Quand un utilisateur se connecte, le serveur génère un JWT, qui 
est ensuite envoyé au client (navigateur, application mobile, etc.).
À chaque requête protégée, le client envoie ce token pour prouver 
son identité.

STRUCTURATION 

JWT = chaîne de caractères encodée 3 parties, séparées par des points 
  ex = xxxxxxxx.yyyyyyyy.zzzzzzzz
        |          |          |
      HEADER    PLAYLOAD    SIGNATURE
        |          |          |
        |          |          |
        |          |      (verif authenticiter)
        |          |
        |  (donnee utilisateur: ID...)
        |
(info algo utiliser)
=========================================================================
                    THUNDER client

Sert a verif si requete sur base de donnee.
Pas postman car pas droit sudo donc pas arriver a instalation, 
1 Changer la methode (post, get),
2 Mettre d'url (ex : http://localhost:5000/auth/signup)
3 Aller de "Body" -> JSON et mettre un contenu
4 Appuyer sur 'SEND'


==========================================================================
                     AUTHENTIFICATION

✅ Créer un utilisateur avec un UUID unique lors de l'inscription.
✅ Stocker l'utilisateur en base de données avec un mot de passe hashé.
✅ Générer un JWT contenant l'UUID de l'utilisateur lors de la connexion.
✅ Vérifier le JWT avec un middleware et protéger une route.
✅ Accéder à ta route protégée et voir l'UUID de l'utilisateur authentifié.




✅ S'inscrire avec email et mot de passe (sujet le demande) 
✅ Inscription puis login puis update info profile (profile full)
✅ Protection de toutes les routes (middleware) dans arg des routes

✅ Creation tags avec tags tables et user_tags qui relier les utilisateur 
   et les tags via l'id des user et id des tags (requete api et sql ok)
✅ profile_complet si tt les champs sont rempli ainsi que les tags

A FAIRE = docker rendre permanent tables (et ses donnees) dans matcha
          Faire un script qui creer des utilisateurs random dans matcha
===========================================================================
                CREATIONS TABLES user/utilisateurs

CREATE TABLE utilisateurs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    uuid VARCHAR(36) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    mot_de_passe VARCHAR(255) NOT NULL,
    nom VARCHAR(100),
    prenom VARCHAR(100),
    pseudo VARCHAR(50) UNIQUE,
    age INT CHECK (age >= 18),
    genre ENUM('F', 'M', 'O') NOT NULL DEFAULT 'O',
    orientation ENUM('F', 'M', 'O') NOT NULL DEFAULT 'O',
    localisation VARCHAR(255) DEFAULT NULL,
    lat DOUBLE DEFAULT NULL,
    lon DOUBLE DEFAULT NULL,
    profil_complet BOOLEAN DEFAULT FALSE
);

==== LOCALISATION
ALTER TABLE utilisateurs
ADD COLUMN localisation VARCHAR(255) DEFAULT NULL;

ALTER TABLE utilisateurs
ADD COLUMN lat DOUBLE DEFAULT NULL,
ADD COLUMN lon DOUBLE DEFAULT NULL;


CREATION USERS RANDOM : 
INSERT INTO utilisateurs (uuid, email, mot_de_passe, nom, prenom, pseudo, age, genre, orientation, profil_complet)
VALUES
    (UUID(), 'user1@example.com', SHA2('Jeanjean@1', 256), 'Dupont', 'Jean', 'jeanD', 25, 'M', 'F', FALSE),
    (UUID(), 'user2@example.com', SHA2('Sophiesophie@1', 256), 'Martin', 'Sophie', 'sophieM', 30, 'F', 'M', FALSE),
    (UUID(), 'user3@example.com', SHA2('Lucluc@1', 256), 'Bernard', 'Luc', 'lucB', 28, 'M', 'O', FALSE),
    (UUID(), 'user4@example.com', SHA2('Emmaemma@1', 256), 'Leroy', 'Emma', 'emmaL', 22, 'F', 'M', FALSE),
    (UUID(), 'user5@example.com', SHA2('Alexalex@1', 256), 'Moreau', 'Alex', 'alexM', 26, 'O', 'O', FALSE),
    (UUID(), 'user6@example.com', SHA2('Claraclara@1', 256), 'Simon', 'Clara', 'claraS', 35, 'F', 'F', FALSE),
    (UUID(), 'user7@example.com', SHA2('Nathannathan@1', 256), 'Roux', 'Nathan', 'nathanR', 29, 'M', 'M', FALSE),
    (UUID(), 'user8@example.com', SHA2('Elodieelodie@1', 256), 'Fournier', 'Elodie', 'elodieF', 27, 'F', 'O', FALSE),
    (UUID(), 'user9@example.com', SHA2('Thomastomas@1', 256), 'Girard', 'Thomas', 'thomasG', 31, 'M', 'F', FALSE);


ALTER TABLE utilisateurs
ADD COLUMN localisation VARCHAR(255) DEFAULT NULL,
ADD COLUMN lon DOUBLE DEFAULT 0,
ADD COLUMN lat DOUBLE DEFAULT 0;
{
  "nom": "test",
  "prenom": "test",
  "pseudo": "test23",
  "email": "@gmail.com",
  "mot_de_passe": ""
}


{
  "age": "38",
  "genre": "O",
  "orientation": "M",
  "tags": ["Geek", "Lecture"],
  "location": "Bordeaux"
}

==========================================================================
                          MATCHING

SUJET = regarder genre de la personne et voir son orientation si O = F/M
- La même zone géographique que l'utilisateur.
- Un maximum de tags communs.
- Un maximum d'indices de notoriété.

recommander d'abord mm zone géographique
ensuite : par l'age, zone geo, framerating et common tags

doit pouvoir METTRE DES FILTRES DANS LA RECHERCHE : - age, 
                                                    - zone geo,
                                                    - framerating,
                                                    - tags.

=========================================================================
              ASSOCIATION TAGS ID ET ID D'UN UTILISATEUR

1 ==> Creation table UTILISATEURS == CREATE TABLE utilisateurs (
                               id INT AUTO_INCREMENT PRIMARY KEY,
                               uuid VARCHAR(36) NOT NULL UNIQUE,
                               email VARCHAR(255) NOT NULL UNIQUE,    
                               mot_de_passe VARCHAR(255) NOT NULL, 
                               nom VARCHAR(100),     prenom VARCHAR(100),
                               pseudo VARCHAR(50) UNIQUE,
                               age INT CHECK (age >= 18),
                               genre ENUM('F', 'M', 'O') NOT NULL DEFAULT 'O',
                               orientation ENUM('F', 'M', 'O') NOT NULL DEFAULT 'O',
                               profil_complet BOOLEAN DEFAULT FALSE );

2 ==> Creation table TAGS == create table tags (
                        id varchar(36) not null,
                        name varchar(255), primary key (id),
                        unique(id));

3 ==> Creation table user_tags(lien entre utlisateurs id et tags id)
create table user_tags (
userId varchar(36) not null references users(id),
tagId varchar(36) not null references tags(id),
primary key(userId, tagId));

4 ==> Creer des utlisateurs dans utlisateurs (via sql ou requete api)

5 ==> Creer des tags dans tags ==
INSERT INTO tags (id, name) VALUES 
(UUID(), 'Netflix'),
(UUID(), 'Lecture'),
(UUID(), 'Vegan'),
(UUID(), 'Geek'),
(UUID(), 'Tatouage'),
(UUID(), 'Piercing'),
(UUID(), 'Sport');

6 ==> ASSOCIER ID USER ET ID TAGS 
     |
     |    Recup id utlisateurs :
     ---> SELECT id FROM users WHERE pseudo = 'pseudo du user';
     |    (renvoie id -> exemple '1')
     |
     |    Recup id tags :
     ---> SELECT id FROM tags WHERE name IN ('Netflix', 'Sport', 'Lecture');
     |    (renvoie id -> exemple '987654321', '12345', '67890)
     |
     |    Association tags/utlisateurs : Netflix id = '987654321'
     ---> INSERT INTO user_tags (userId, tagId) VALUES 
         ('1', '987654321');
            |            |
            |            |
            |        ID tag netflix
            |    
          ID utilisateur

     |
     |
     |    Verrf tag associer a utlisateurs
     ---> SELECT tags.name 
          FROM user_tags 
          JOIN tags ON user_tags.tagId = tags.id
          WHERE user_tags.userId = '1';
                                    |
                                ID utilisateur
          (renvoie 'netflix')


7 ===> association de tags 
INSERT INTO user_tags (userId, tagId) VALUES
-- Utilisateur 1
(1, (SELECT id FROM tags WHERE name = 'Netflix')),
(1, (SELECT id FROM tags WHERE name = 'Geek')),
(1, (SELECT id FROM tags WHERE name = 'Sport')),

-- Utilisateur 2
(2, (SELECT id FROM tags WHERE name = 'Lecture')),
(2, (SELECT id FROM tags WHERE name = 'Vegan')),
(2, (SELECT id FROM tags WHERE name = 'Tatouage')),

-- Utilisateur 3
(3, (SELECT id FROM tags WHERE name = 'Tatouage')),
(3, (SELECT id FROM tags WHERE name = 'Piercing')),
(3, (SELECT id FROM tags WHERE name = 'Netflix')),

-- Utilisateur 4
(4, (SELECT id FROM tags WHERE name = 'Sport')),
(4, (SELECT id FROM tags WHERE name = 'Geek')),
(4, (SELECT id FROM tags WHERE name = 'Vegan')),

-- Utilisateur 5
(5, (SELECT id FROM tags WHERE name = 'Netflix')),
(5, (SELECT id FROM tags WHERE name = 'Sport')),
(5, (SELECT id FROM tags WHERE name = 'Piercing')),

-- Utilisateur 6
(6, (SELECT id FROM tags WHERE name = 'Tatouage')),
(6, (SELECT id FROM tags WHERE name = 'Lecture')),
(6, (SELECT id FROM tags WHERE name = 'Geek')),

-- Utilisateur 7
(7, (SELECT id FROM tags WHERE name = 'Lecture')),
(7, (SELECT id FROM tags WHERE name = 'Sport')),
(7, (SELECT id FROM tags WHERE name = 'Vegan')),

-- Utilisateur 8
(8, (SELECT id FROM tags WHERE name = 'Geek')),
(8, (SELECT id FROM tags WHERE name = 'Vegan')),
(8, (SELECT id FROM tags WHERE name = 'Netflix')),

-- Utilisateur 9
(9, (SELECT id FROM tags WHERE name = 'Piercing')),
(9, (SELECT id FROM tags WHERE name = 'Tatouage')),
(9, (SELECT id FROM tags WHERE name = 'Lecture')),

-- Utilisateur 10
(10, (SELECT id FROM tags WHERE name = 'Sport')),
(10, (SELECT id FROM tags WHERE name = 'Netflix')),
(10, (SELECT id FROM tags WHERE name = 'Tatouage'));

====================================================================================
J'en suis a l'etape ou je dois faire l'algo de matching entre les 
profils pour mon site de rencontre. d'apres le sujet je dois me 
baser sur 3 criteres :
◦ La même zone géographique que l'utilisateur.
◦ Un maximum de tags communs.
◦ Un maximum d'indices de notoriété. 
======================================================================
                      FAMERATTING

Criteres : 
===> nombre de vue du profil
===> nombre likes
===> frequence de connexion
===> nombre blocage du profil

VIEWS =
CREATE TABLE profile_views (
    id INT AUTO_INCREMENT PRIMARY KEY,
    userId INT NOT NULL,  -- Utilisateur qui est vu
    viewerId INT NOT NULL, -- Utilisateur qui a vu le profil
    viewDate DATETIME DEFAULT CURRENT_TIMESTAMP,  -- Date de la vue
    FOREIGN KEY (userId) REFERENCES utilisateurs(id),
    FOREIGN KEY (viewerId) REFERENCES utilisateurs(id)
);

inserer des view =
INSERT INTO profile_views (userId, viewerId, viewDate)
VALUES 
    (1, 2, NOW()), 
    (1, 3, NOW() - INTERVAL 1 HOUR), 
    (1, 4, NOW() - INTERVAL 2 HOUR),
    (2, 1, NOW()), 
    (2, 5, NOW() - INTERVAL 30 MINUTE), 
    (2, 6, NOW() - INTERVAL 1 DAY),
    (3, 4, NOW()), 
    (3, 7, NOW() - INTERVAL 2 DAY), 
    (3, 8, NOW() - INTERVAL 3 DAY),
    (4, 5, NOW()), 
    (4, 6, NOW() - INTERVAL 1 HOUR), 
    (4, 7, NOW() - INTERVAL 4 HOUR),
    (5, 1, NOW()), 
    (5, 2, NOW() - INTERVAL 2 HOUR), 
    (5, 3, NOW() - INTERVAL 1 DAY),
    (6, 3, NOW()), 
    (6, 4, NOW() - INTERVAL 30 MINUTE), 
    (6, 5, NOW() - INTERVAL 12 HOUR),
    (7, 8, NOW()), 
    (7, 9, NOW() - INTERVAL 1 DAY),
    (8, 9, NOW()), 
    (8, 1, NOW() - INTERVAL 4 DAY),
    (9, 1, NOW()), 
    (9, 2, NOW() - INTERVAL 3 HOUR), 
    (9, 3, NOW() - INTERVAL 1 WEEK),
    (9, 3, NOW() - INTERVAL 1 WEEK);


LIKES =
CREATE TABLE likes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    userId INT NOT NULL,  -- Utilisateur qui a reçu le like
    likerId INT NOT NULL, -- Utilisateur qui a aimé
    likeDate DATETIME DEFAULT CURRENT_TIMESTAMP,  -- Date du like
    FOREIGN KEY (userId) REFERENCES utilisateurs(id),
    FOREIGN KEY (likerId) REFERENCES utilisateurs(id)
);

inserrer des likes = INSERT INTO likes (userId, likerId, likeDate)
VALUES 
    (1, 2, NOW()), 
    (1, 3, NOW() - INTERVAL 1 HOUR), 
    (1, 4, NOW() - INTERVAL 2 HOUR),
    (2, 1, NOW()), 
    (2, 5, NOW() - INTERVAL 30 MINUTE), 
    (2, 6, NOW() - INTERVAL 1 DAY),
    (3, 4, NOW()), 
    (3, 7, NOW() - INTERVAL 2 DAY), 
    (3, 8, NOW() - INTERVAL 3 DAY),
    (4, 5, NOW()), 
    (4, 6, NOW() - INTERVAL 1 HOUR), 
    (4, 7, NOW() - INTERVAL 4 HOUR),
    (5, 1, NOW()), 
    (5, 2, NOW() - INTERVAL 2 HOUR), 
    (5, 3, NOW() - INTERVAL 1 DAY),
    (6, 3, NOW()), 
    (6, 4, NOW() - INTERVAL 30 MINUTE), 
    (6, 5, NOW() - INTERVAL 12 HOUR),
    (7, 8, NOW()), 
    (7, 9, NOW() - INTERVAL 1 DAY),
    (8, 9, NOW()), 
    (8, 1, NOW() - INTERVAL 4 DAY),
    (9, 1, NOW()), 
    (9, 2, NOW() - INTERVAL 3 HOUR), 
    (9, 3, NOW() - INTERVAL 1 WEEK);


CONNEXION =
CREATE TABLE user_sessions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    userId INT NOT NULL,  -- Utilisateur qui s'est connecté
    sessionDate DATETIME DEFAULT CURRENT_TIMESTAMP,  -- Date de la session
    FOREIGN KEY (userId) REFERENCES utilisateurs(id)
);

inserer des connexion =
INSERT INTO user_sessions (userId, sessionDate)
VALUES 
    (1, NOW()), (1, NOW() - INTERVAL 1 DAY), (1, NOW() - INTERVAL 3 DAY),
    (2, NOW()), (2, NOW() - INTERVAL 2 DAY), (2, NOW() - INTERVAL 5 DAY),
    (3, NOW()), (3, NOW() - INTERVAL 1 HOUR), (3, NOW() - INTERVAL 4 DAY),
    (4, NOW()), (4, NOW() - INTERVAL 6 HOUR), (4, NOW() - INTERVAL 10 DAY),
    (5, NOW()), (5, NOW() - INTERVAL 3 DAY), (5, NOW() - INTERVAL 7 DAY),
    (6, NOW()), (6, NOW() - INTERVAL 12 HOUR), (6, NOW() - INTERVAL 15 DAY),
    (7, NOW()), (7, NOW() - INTERVAL 1 DAY), (7, NOW() - INTERVAL 9 DAY),
    (8, NOW()), (8, NOW() - INTERVAL 5 DAY), (8, NOW() - INTERVAL 11 DAY),
    (9, NOW()), (9, NOW() - INTERVAL 2 HOUR), (9, NOW() - INTERVAL 8 DAY);


BLOCK = 
CREATE TABLE user_blocks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    blockedUserId INT NOT NULL,  -- Utilisateur bloqué
    blockerUserId INT NOT NULL,  -- Utilisateur qui a bloqué
    blockDate DATETIME DEFAULT CURRENT_TIMESTAMP,  -- Date du blocage
    FOREIGN KEY (blockedUserId) REFERENCES utilisateurs(id),
    FOREIGN KEY (blockerUserId) REFERENCES utilisateurs(id)
);

insert des blocks =
INSERT INTO user_blocks (blockedUserId, blockerUserId, blockDate)
VALUES 
(1, 2, NOW()), (1, 3, NOW() - INTERVAL 2 DAY), 
(2, 4, NOW()), (2, 5, NOW() - INTERVAL 1 WEEK), 
(3, 6, NOW()), 
(4, 7, NOW()), (4, 8, NOW() - INTERVAL 3 DAY),
(5, 9, NOW()), 
(6, 9, NOW()), 
(7, 1, NOW() - INTERVAL 1 DAY), 
(8, 2, NOW() - INTERVAL 5 DAY), 
(9, 3, NOW() - INTERVAL 2 WEEK);

=============================================================================
                      API LOCALISATION
                     (OpenCage Geocoder)
larazanetti@outlook.fr
Ericlara04?

dependance : npm install axios

UPDATE utilisateurs 
SET localisation = 
    CASE 
        WHEN id % 3 = 1 THEN 'Paris' 
        WHEN id % 3 = 2 THEN 'Bordeaux' 
        ELSE 'Dijon' 
    END,
    lat = 
    CASE 
        WHEN id % 3 = 1 THEN 48.8588897 
        WHEN id % 3 = 2 THEN 44.841225 
        ELSE 47.3215806 
    END,
    lon = 
    CASE 
        WHEN id % 3 = 1 THEN 2.320041 
        WHEN id % 3 = 2 THEN -0.5800364 
        ELSE 5.0414701 
    END
WHERE id BETWEEN 1 AND 9;

http://localhost:5000/match/2?ageDiff=2
http://localhost:5000/match/3?filterTags=true&minCommonTags=3
http://localhost:5000/match/2?famerating=true&minFameRating=0.6